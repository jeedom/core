:Author:    Skyline-ch
:Email:     <skyline-ch@play-4-fun.net>
:Date:      12.12.2015
:Revision:  2.0.0

= Interactions - Principe

Le système d'interaction dans Jeedom permet de réaliser des actions à partir de commande texte ou vocale.

Type de commandes :

* action : lancer une commande, exemples : activer ou désactiver une lampe, alarme, chauffage, etc...
* Info : interroger Jeedom avec une commande info pour connaître, par exemple la température du salon, l'état d'un appareil.

Ces commandes peuvent être obtenues par :

* SMS : envoyer un SMS pour lancer des commandes (action) ou poser une question (info).
* Vocal : dicter une phrase avec Siri, Google Now, SARAH, etc... Pour lancer des commandes (action) ou poser une question (info).
* HTTP : lancer une URL HTTP contenant le texte (ex. Tasker, Slack) pour lancer des commandes (action) ou poser une question (info).

L'intérêt des interactions réside dans l'intégration simplifié dans d'autre système comme smartphone, tablette, autre box domotique, etc...

Avec un seul mécanisme sur d'autre système on peut donc contrôler tout Jeedom, ce qui permet une grande souplesse et d'éviter les bugs en cas de modification de la configuration de vos équipements comme ce serais le cas avec un accès direct via l'url de chaque commande.

== Premier pas

=== Page accueil des interactions

Pour accéder à la page d'interaction il faut aller sur Outils -> interactions: 

image::../images/interact001.png[]

Liste des interactions et action général :

image::../images/interact002.png[]

[TIP]
Comme à beaucoup d'endroits sur Jeedom, mettre la souris tout à gauche permet de faire apparaître un menu d'accès rapide (vous pouvez à partir de votre profil le laisser toujours visible).

* En haut de page, on trouve 3 boutons :
** *1* Le bouton "Ajouter" qui permet de créer de nouvelle interaction.
** *2* Le bouton "Régénérer" qui vas recréer toutes les interactions (peut être très long > 5min).
** *3* Le bouton "Tester" qui permet d'ouvrir un boite de dialogue pour écrire et tester une phrase.

[TIP]
Si vous avez une interaction qui génère les phrases pour les lumières par exemple, et que vous ajoutez un nouveau module de commande de lumière, il vous faudra soit régénérer toutes les interactions soit allez dans l'interaction en question et la re-sauver pour créer les phrases de ce nouveau module.


=== Créer-Modifier une interaction

Le principe de création est assez simple, on va définir une phrase modèle génératrice qui va permettre à Jeedom de créer une ou plusieurs centaines d’autres phrases qui seront autant de combinaisons possibles.

On va définir de la même façon des réponses avec un modèle (ça permet à Jeedom d’avoir plusieurs réponses pour une seule et même question).

On peut aussi définir une commande à exécuter si par exemple l'interaction n'est pas liée à une action mais une information ou si on souhaite réaliser une action particulière après celle-ci (il est aussi possible d'exécuter un scénario, de contrôler plusieurs commandes...).

==== Interphase de configuration

Cette page permet de configurer toutes les interactions orales (via le module SARAH, ou tasker (+ autovoice), voir https://jeedom.fr/doc/documentation/howto/fr_FR/doc-howto-android.autovoice.html[ici]) ou écrites ( les sms ou le plugin Slack par exemple…) que l’on peut trouver sur le Market Jeedom.

Une fois l'interaction créée ou suite à un clique sur une interaction éxistante (pour la modifier) vous arrivez sur la page de configuration de l'interaction :

image::../images/interact003.png[]

Ici vous trouvez 2 zones avec plusieurs éléments en leur sein : 

* *Général*
** *Nom* : nom de l'interaction (peut être vide, le nom remplace le texte de la demande dans la liste des interactions).
** *Groupe* : groupe de l'interaction, cela permet de les organiser (peut être vide, sera donc dans le groupe "aucun").
** *Demande* : la phrase modèle génératrice (obligatoire).
** *Synonyme* : permet de définir des synonymes sur les noms des commandes.
** *Réponse* : la réponse à fournir.
** *Conversion binaire* : permet de convertir les valeurs binaires en ouvert/fermé par exemple (uniquement pour les commandes de type info binaire).
** *Utilisateur autorisés* : limite l'interaction à certain utilisateur (les logins séparé par des |).
* *Filtres (limite le champ d'application pour le modèle aux éléments sélectionnés)*
** *Limiter aux commandes de type* : permet de n'utiliser que les type actions, infos ou les 2 types.
** *Limiter aux commandes ayant pour sous-type* : permet de limiter la génération à un ou plusieurs sous-types.
** *Limiter aux commandes ayant pour unité* : permet de limiter la génération à une ou plusieurs unités (Jeedom crée la liste automatiquement à partir des unités définies dans vos commandes).
** *Limiter aux commandes appartenant à l'objet* : permet de limiter la génération à un ou plusieurs objet (Jeedom crée la liste automatiquement à partir des objets que vous avez créé).
** *Limiter au plugin* : permet de limiter la génération à un ou plusieurs plugins (Jeedom crée la liste automatiquement à partir des plugins installés).
** *Limiter à la catégorie* : permet de limiter la génération à une ou plusieurs catégorie.
** *Limiter à l'équipement* : permet de limiter la génération à un seul équipement/module (Jeedom crée la liste automatiquement à partir des équipement/module installés).
* *Action* : à utiliser si vous voulez cibler une ou plusieurs commande(s) spécifique(s) ou passer des paramètres particuliers.
* *Phrases générées*
** *Phrases générées* : Bouton qui permet de voir les phrases générées par la phrase modèle (Vous devez sauver l'interaction pour générer ou régénérer les phrases).
** *Nombre de phrases générées* : nombre de phrases générées.

==== Interaction simple

La façon la plus simple de configurer une interaction c'est de lui donner un modèle générateur rigide sans variation possible, cette méthode ciblera très précisément une commande, ou un scénario.

Dans l'exemple qui suit, on peut voir dans "Demande" la phrase exacte à fournir pour déclencher l'interaction, ici pour allumer le plafonnier du salon.

image::../images/interact004.png[]

on peut voir sur cette capture la configuration pour avoir une interaction liée à une action spécifique, cette action est définie dans la partie "Action" de la page.

on peut très bien imaginer faire de même avec plusieurs actions pour allumer plusieurs lampes dans le salon comme l'exemple suivant :

image::../images/interact005.png[]

Dans les 2 exemples ci dessus, la phrase modèle est identique mais les actions qui en découle changent en fonction de ce qui est configurer dans la partie "Action", on peut donc déjà avec une interaction simple, à phrase unique, imaginer des actions combinées entre divers commandes et scénarios (on peut aussi déclencher des scénarios dans la partie action des interactions).

[TIP]
Pour ajouter un scénario, créer une nouvelle action, écrire "scenario" sans accent appuyer sur la touche tabulation de votre clavier pour faire apparaitre le sélecteur de scénario.


==== Interaction multiple commande

Nous allons ici voir tout l'intérêt et puissance des interactions, avec une phrase modèle nous allons pouvoir générer des phrases pour tout un groupe de commande.

On va reprendre ce qui a été fait plus haut, supprimer les actions que l'on avait ajoutées et à la place de la phrase fixe dans "Demande", nous allons utiliser les tags *\#commande#* et *\#equipement#*, Jeedom va donc remplacer ces tags par le nom des commandes et le nom de l'équipement (on peut voir l'importance d'avoir des noms de commande/équipement cohérant).

image::../images/interact006.png[]

on peut donc constater ici que Jeedom à générer 152 phrases à partir de notre modèle, toutefois elles ne sont pas très bien construite et l'on a un peu de tout.

Pour mettre de l'ordre dans tout cela, on va utiliser les filtres (partie de droite de notre page de configuration).
Dans cette exemple on veux générer des phrases pour allumer des lumières, on peut donc décocher le type de commande info (si je sauve il ne me reste plus que 95 phrases générées), puis dans les sous-types, on peut ne garder que "Défaut" qui correspond au bouton d'action (reste donc plus que 16 phrases).

image::../images/interact007.png[]

c'est mieux mais on peut faire encore plus naturel, si je prends l'exemple générer "On entrée", il serais bien de pouvoir transformer cette phrase en "allume l'entrée" ou en "allumer l'entrée".
Pour faire cela Jeedom dispose sous le champ demande, un champ synonyme qui va nous permettre de nommer différemment le nom des commandes dans nos phrases générées, ici c'est "on", j'ai même des "on2" dans les modules qui peuvent contrôler 2 sorties.

On va donc dans les synonymes indiquer le nom de la commande et le(s) synonyme(s) à utiliser : 

image::../images/interact008.png[]

on peut voir ici une syntaxe un peu nouvelle pour les synonymes, un nom de commande peut avoir plusieurs synonymes, ici "on" a comme synonyme "allume" et "allumer", la syntaxe c'est donc "#nom de la commande#" *#=#* "#synonyme 1#"*#,#* "#synonyme 2#" (on peut mettre autant de synonyme que l'on veux). 
Pour ajouter des synonymes pour un autre nom de commande, il suffit d'ajouter après le dernier synonyme une barre verticale "#|#" puis d'en rajouter un second (de synonyme).

Bien c'est déjà mieux mais il manque encore pour la commande "on" "entrée" le "l' " et pour d'autre le "la" ou "le" ou "un" etc...
On pourrais modifier le nom de l'équipement pour l'ajouter, ce serais une solution, sinon on peut utiliser les variations dans la demande, cela consiste à lister une série de mot possible à un emplacement de la phrase, Jeedom va donc générer des phrases avec ses variations.

image::../images/interact009.png[]

Comme vous pouvez le voir dans la liste à gauche on a maintenant des phrases un peu plus correcte avec des phrases qui ne sont pas juste, pour notre exemple "on entrée", on trouve donc "Allume entrée", "Allume un entrée", "Allume une entrée", "Allume l'entrée" etc... on a donc toutes les variantes possibles avec ce que l'on a ajouté entre les "[ ]" et ceci pour chaque synonyme, ce qui génère rapidement beaucoup de phrases (ici 168).

Afin de rendre encore un peu plus fin et de ne pas avoir des choses improbable telle que "allume l'télé", on peut autoriser Jeedom à supprimer les demandes syntaxiquement incorrectes, il va donc supprimer ce qui est trop éloigné de la syntaxe réel d'une phrase.
Dans notre cas on passe de 168 phrases à 130 phrases.

image::../images/interact010.png[]


Il devient donc important de bien construire ses phrases modèles et synonymes ainsi que de sélectionner les bons filtres pour ne pas générer trop de phrases inutiles.
Personnellement je trouve intéressant d'avoir quelques incohérence du style "un entrée" car si chez vous, vous avez une personne étrangère qui ne parle pas correctement le Français les interactions fonctionnerons tout de même.

==== Interaction Fonctions Avancées

===== Personnaliser les réponses

Jusqu'à présent comme réponse à une interaction nous avions une simple phrase qui n'indique pas grand-chose à part que quelque chose s'est passée.
L'idée serait que Jeedom nous indique ce qu'il a fait un peu plus précisément.
C'est là qu'interviens le champ réponse dans lequel on va pouvoir personnaliser le retour en fonction de la commande exécutée.

Pour ce faire nous allons à nouveau utiliser les Tag Jeedom
Pour nos lumières on peut utiliser une phrase du style : J'ai bien allumé \#equipement# (voir capture ci-dessous).

image::../images/interact011.png[]

on peut aussi ajouter n'importe quelle valeur d'une autre commande comme une température, un nombre de personnes, etc...

image::../images/interact012.png[]

===== Conversion binaire
Les conversions binaires s'appliquent aux commandes de type info dont le sous-type est binaire (retourne 0 ou 1 uniquement) il faut donc activer les bons filtres comme on peut le voir sur la capture un peu plus bas (pour les catégories, on peut toutes les cocher, pour l'exemple j'ai gardé que lumière).

image::../images/interact013.png[]

Comme on peut le voir ici, j'ai conservé quasiment la même structure pour la demande (c'est volontaire pour se concentrer sur les spécificités), on adapte bien sur les synonymes pour avoir quelque chose de cohérant, par contre pour la réponse il est #impératif# de mettre uniquement \#valeur# qui représente le 0 ou 1 que Jeedom va remplacer par la conversion binaire qui suit.

Le champ conversion binaire doit contenir 2 réponses, en premier la réponse de la valeur de la commande qui vaut 0 séparer par une barre vertical "|" de la commande qui vaut 1.
Ici les réponses sont simplement non et oui mais on pourrais y mettre une phrase un peu plus longue.

[WARNING]
Les tags ne fonctionnent pas dans les conversions binaires.

====== Utilisateurs autorisés

Le champ "Utilisateurs autorisés" permet de n’autoriser que certaines personnes à exécuter la commande, vous pouvez mettre plusieurs profils en les séparant par un "|".

Exemple : personne1|personne2

on peut imaginer qu'une alarme ne peux être activée ou désactivée par un enfant ou un voisin qui viendrait arroser les plantes en votre absence...

====== Regexp d'exclusion
[IMPORTANT]
Fonction réservée au connaisseur ou téméraire qui savent utiliser Google.

Depuis Jeedom V2.00 on a la possibilité de créer des https://fr.wikipedia.org/wiki/Expression_rationnelle[Regexp] d'exclusion, si une phrase générée correspond à ce(s) Regexp elle sera supprimée.
L'intérêt c'est de pouvoir supprimer des faux positif, c'est a dire une phrase généré par Jeedom qui active quelque chose qui ne correspond pas à ce que l'on veut ou qui viendrait parasiter une autre interaction.

On a 2 endroits pour appliquer une Regexp :

* dans l'interaction même dans le champ "Regexp d'exclusion".

* Dans le menu "configuration"->"Configuration des interactions"->champ "Regexp général d'exclusion pour les interactions".

Pour le champ "Regex général d'exclusion pour les interactions", cette règle sera appliquer à toutes les interactions, qui seront créer ou re-sauver par la suite, si on veut l’appliquer à toutes les interactions existante, il faut régénérer les interactions.
Généralement on l'utilise pour effacer des phrases incorrectements formées se retrouvant dans la plupart des interactions générées.

Pour le champ "Regexp d'exclusion" dans la page de config de chaque interaction, on peut mettre une Regexp spécifique qui va agir uniquement sur la dite interaction, elle vous permet donc de supprimer plus précisément une interaction, cela peut aussi permettre d'effacer une interaction pour une commande spécifique pour laquelle on ne veut pas offrir cette possibilité dans le cadre d'une génération multiple.

La capture d'écran qui suit montre l'interaction sans le Regexp, dans la liste de gauche, je filtre les phrases pour vous montrer que les phrases qui vont être supprimées, en réalité il y as 76 phrase générées avec la configuration de l'interaction.

image::../images/interact014.png[]


Comme vous pouvez le voir sur la capture suivante, j'ai ajouté un regexp simple qui va chercher le mot "Julie" dans les phrases générées et les supprimer, toutefois on peut voir dans la liste de gauche qu'il y a toujours des phrases avec le mot "julie". Dans les expressions régulières, Julie n'est pas égale à julie, on appelle cela une sensibilisée à la casse ou en bon français une majuscule est différente d'une minuscule.
Comme on peut le voir dans la capture suivante, il ne reste plus que 71 phrases, les 5 avec un Julie ont été supprimées.

Une expression régulière se compose comme suit :

* En premier un délimiteur, ici c'est une barre oblique "/" placée en début et fin de l'expression.

* le point qui suit la barre oblique représente n'importe quel caractère, espace, ou nombre.

* Le "*", quant à lui, indique qu'il peut y avoir 0 ou plusieurs fois le caractère qui le précède, ici un point, donc en bon français n'importe quel élément.

* Puis Julie, qui est le mot à rechercher (mot ou autre schéma d'expression), suivi à nouveau d'un point barre oblique.

Si on traduit cette expression en une phrase cela donnerais "cherche le mot Julie qui est précédé par n'importe quoi et suivi de n'importe quoi".

C'est une version extrêmement simple des expressions régulières mais déjà très compliqué à comprendre, il m’a fallu un moment pour en saisir le fonctionnement, pour exemple un peu plus complexe, une regexp pour vérifier une adresse url : 

/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]\*)*\/?$/ 

Une fois que tu peux écrire ça tu as compris les expressions régulières.

image::../images/interact015.png[]

Pour résoudre le problème de majuscule et minuscule, on peut ajouter à notre expression une option qui va la rendre insensible à la casse, ou autrement dis, qui considère une lettre en minuscule égale à une majuscule, pour se faire on dois simplement ajouter à la fin de notre expression un "i".

image::../images/interact016.png[]

Avec l'ajout de l'option "i" on constate qu'il ne reste plus que 55 phrases générées, et dans la liste de gauche avec le filtre julie pour rechercher les phrases qui contiennent ce mot, on constate qu'il y en a bien plus.

Comme c'est un sujet extrêmement complexe je vais pas aller plus en détail ici, il y as suffisamment de tuto sur le net pour vous aider, et n'oubliez pas Google est votre ami aussi car oui, c'est mon ami c'est lui qui m’a appris à comprendre les Regexp et même à coder, donc s'il m'a aider il peut aussi vous aider ... si vous y mettez de la bonne volonté.

Lien utile : 

* http://google.fr

* http://www.commentcamarche.net/contents/585-javascript-l-objet-regexp

* https://www.lucaswillems.com/fr/articles/25/tutoriel-pour-maitriser-les-expressions-regulieres

* https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/les-expressions-regulieres-partie-1-2






== Exemples

=== Réponse composé de plusieurs informations

Il est aussi possible de mettre plusieurs commandes info dans une réponse, par exemple pour avoir un résumé de situation.

image::../images/interact021.png[]

Dans cet exemple on voit une phrase simple qui va nous retourner une réponse avec 3 températures différentes, on peut donc ici mettre un peu tout ce que l'on veut afin d'avoir un ensemble d'information en une seule fois.





=== Y a-t-il quelqu'un dans la chambre ?

==== Version basique

* La question est donc "y’a-t-il quelqu’un dans la chambre"
* La réponse sera "non il n’y a personne dans la chambre" ou "oui il y a quelqu’un dans la chambre"
* La commande qui répond à ça est "\#[Chambre de julie][FGMS-001-2][Présence]#"

image::../images/interact017.png[]

Cet exemple cible précisément un équipement spécifique ce qui permet d'avoir une réponse personnalisé, on pourrais donc imaginer remplacer la réponse de l'exemple par "non il n’y a personne dans la chambre de #julie#|oui il y a quelqu’un dans la chambre #julie#"

==== Evolution 

* La question est donc "\#commande# [dans la |dans le] \#objet#"
* La réponse sera "non il n’y a personne dans la pièce" ou "oui il y a quelqu’un dans la pièce"
* Il n'y as pas de commande qui réponde à ça dans la partie Action vu que c'est une interaction Multiple commande
* En ajoutant une expression régulière on peut nettoyer les commandes que l'on ne veut pas voir pour n'avoir que les phrases sur les commandes "Présence".

image::../images/interact018.png[]

Sans le Regexp on obtient ici 11 phrases, hors mon interaction a pour but de générer des phrases uniquement pour demander si il y a quelqu'un dans une pièce, donc j'ai pas besoin d'état de lampe ou autre comme les prises, ce qui peux être résolu avec le filtrage regexp.
Pour rendre encore plus flexible on peut ajouter des synonymes, mais dans ce cas il ne faudra pas oublier de modifier le regexp.




=== Connaitre la température/humidité/luminosité

==== Version basique
On pourrai écrire la phrase en dur comme par exemple "quelle est la température du salon", mais il faudrait en faire une pour chaque capteur de température, luminosité et humidité, avec le système de génération de phrase Jeedom. On peut donc, avec une seule interaction, générer les phrases pour tous les capteurs de ses 3 types de mesure.

Ici un exemple générique qui sert à connaître la température, l’humidité, la luminosité des différentes pièces (objet au sens Jeedom).

image::../images/interact019.png[]

* on peut donc voir qu'une phrase générique type "Quelle est la température du salon" ou "Quelle est la luminosité de la chambre" peut être convertie en : "quelle est [la |l\']\#commande# [du |de la |de l'| sur le |dans le | dans la ]#objet#" (l’utilisation de [mot1 | mot2] permet de dire cette possibilité ou celle-là pour générer toutes les variantes possibles de la phrase avec mot1 ou mot2). Lors de la génération, Jeedom va générer toutes les combinaisons possibles de phrase avec toutes les commandes existantes (en fonction des filtres) en remplaçant \#commande# par le nom de la commande et \#objet# par le nom de l’objet.
* La réponse sera de type "21 °C" ou "200 lux" il suffit de mettre : \#valeur# \#unite# (l'unité est à compléter dans la configuration de chaque commande pour laquelle on veux en avoir une)
* Cette exemple génère donc une phrase pour toutes les commandes de type info numérique qui ont une unité, on peut donc décocher des unités dans le filtre de droite, limité au type qui nous intéresse.


==== Evolution 
On peut donc ajouter des synonymes au nom de commande pour avoir quelque chose que plus naturel, ajouter un regexp pour filtrer les commande qui non rien à voir avec notre interaction.

Ajout de synonyme, permet de dire à Jeedom qu'une commande qui s'appele "X" on peut aussi l'appeler "Y" et donc dans notre phrase si on as "allume y", Jeedom sais que Y correspond à X. Cette méthode est très pratique pour renommer des noms de commande qui, quand elles sont affichées à l'écran, sont écrites d'une façon qui n'est pas naturel vocalement ou dans une phrase écrite comme les "ON", un bouton écrit comme cela est totalement logique mais pas dans le contexte d'une phrase.

on peut aussi ajouter un filtre Regexp pour enlever quelques commandes. En reprenant l'exemple simple on voit des mots "batterie" ou encore "latence", qui non rien à voir avec notre interaction température/humidité/luminosité.

image::../images/interact020.png[]

on peut donc voir un regexp : 

*(batterie|latence|pression|vitesse|consommation)*

celui ci permet de supprimer toutes les commandes qui ont l'un de ses mots dans leur phrase

[NOTE]
Le regexp ici est une version simplifiée pour une utilisation simple on peut donc soit utiliser les expressions traditionnelles soit simplifiés comme dans cet exemple





=== Piloter un dimmer ou un thermostat (slider)

==== Version basique

Il est possible de piloter une lampe en pourcentage (variateur) ou un thermostat avec les interactions. Voici un exemple pour piloter son variateur sur une lampe avec des interactions : 

image::../images/interact022.png[]

Comme on le voit, il y a ici dans la demande le tag *\#consigne#* (on peut mettre ce que l'on veut) qui est repris dans la commande du variateur pour appliquer la valeur voulu.
Pour ce faire on a 3 partie :
* Demande : dans laquelle créer un tag qui va représenter la valeur qui sera envoyer à l'interaction.
* Réponse : on réutilise le tag pour la réponse afin d'être sûr que Jeedom a bien compris.
* Action : on met une action sur la lampe que l'on veut piloter et dans la valeur, on y passe notre tag #consigne#.

[NOTE]
On peut utiliser n'importe quel tag, excepté ceux déjà utiliser par Jeedom. Il peut en avoir plusieurs pour piloter, par exemple, plusieurs commandes. A noter aussi que tous les tags sont passés aux scénarios que l'interaction lance (il faut toutefois que le scénario soit en "Exécuter en avant plan").

==== Evolution 
On peut vouloir piloter toutes les commandes de type curseur avec une seule intéraction. Avec l'exemple qui suit, on va donc pouvoir commander plusieurs variateurs avec une seule interaction et donc générer un ensemble de phrase pour les controler.

image::../images/interact033.png[]

Dans cette interaction, on a pas de commande dans la partie action, on laisse Jeedom générer, à partir des tags, la liste des phrases. On peut voir le tag *\#slider#*, il est impératif d'utiliser ce tag pour les consignes dans une intéraction multiple commande. Il peut ne pas être le dernier mot de la phrase.
On peut aussi voir dans l'exemple que l'on peut utiliser dans la réponse un tag qui ne fais pas parti de la demande, la majoritée des tag dispo dans les sénarios sont disponible aussi dans les intéractions et donc peuvent être utiliser dans une réponse.

Résultat de l'interaction : 

image::../images/interact034.png[]

on peut constater que le tag *\#equipement#* qui n'est pas utiliser dans la demande est bien complété dans la réponse.


=== Piloter la couleur d'un bandeau de LED

Il est possible de piloter une commande couleur par les interactions en demandant par exemple à Jeedom d'allumer un bandeau de led en bleu. 
Voici l'interaction : 

image::../images/interact023.png[]

Jusque-là rien de bien compliqué, il faut en revanche avoir configuré les couleurs dans Jeedom pour que cela fonctionne, rendez-vous dans le menu -> Configuration (en haut à droite) puis dans la partie "Configuration des interactions" : 

image::../images/interact024.png[]

Comme on peut le voir sur la capture, il n'y as pas de couleurs de configuré, il faut donc ajouter des couleurs avec le "+" à droite, le nom de la couleur, c'est le nom que vous allez passer à l'interaction, puis dans la partie de droite (colonne "Code HTML"), en cliquant sur la couleur noir on peut choisir une nouvelle couleur.

image::../images/interact025.png[]

on peut en ajouter autant que bon nous semble, on peut mettre comme n'importe quel nom , ainsi on pourrais imaginer attribuer une couleur pour le nom de chaque membres de la famille.

Une fois configurer vous dite "Allume le sapin en vert", Jeedom va rechercher dans la demande une couleur et l'appliquer à la commande.




=== Utilisation couplé à un scénario

==== Version basique
Il est possible de coupler une interaction à un scénario afin de réaliser des actions un peu plus complexe que l'exécution d'une simple action ou d'une demande d'information.

image::../images/interact026.png[]

Cet exemple permet donc de lancer le scénario qui est lié dans la partie action, on peut bien sûr en avoir plusieurs.


==== Evolution 

on peut aller plus loin avec cette méthode de couplage, ainsi avec un scénario qui retourne une valeur, on peut poser une question, démarrer un scénario, dans ce dernier traiter des informations et retourner une réponse à l'interaction qui à son tour va la retourner au déclencheur de l'interaction.

image::../images/interact027.png[]

Sur la capture on voit l'interaction, très basique pour l'exemple mais on peut bien sûr lui appliquer tout ce que l'on peut voir dans cette doc.
Elle fait donc appel à un scénario.

image::../images/interact028.png[]

Ce scénario est aussi relativement simple, on a des blocs "si" imbriqué pour tester l'heure qu'il est, et en fonction du résultat, retourner une réponse.
On ne peut retourner qu'une seule réponse à l'interaction, il faut donc la construire, dans le cas de notre exemple on a une simple phrase, mais on peut imaginer avoir des variable et des commandes qui vont permettre de faire varier la réponse.
On aurait aussi pu à la place de toutes les actions "return" mettre une action "variable", et à la fin du scénario ne mettre qu'un return avec comme valeur la variable qui aurais eu le contenu de l'une des réponses.

[IMPORTANT]
Il faut absolument que le scénario soit en #*"Exécuter en avant plan"*#

[TIP]
Il est possible de récupérer dans le scénario la demande qui a déclenché celui-ci à l'aide du tag *\#query#*

image::../images/interact029.png[]

on peut ici voir la réponse que nous a donné le scénario qui correspond bien à l'heure actuel (19h).
C'est donc un outil très puissant pour réaliser des interactions complexes avec des réponses variées, on peut imaginer en début de scénario générer un nombre aléatoire, et donc choisir une réponse en fonction de ce nombre, donc pour une même question avoir des 10ène de formulation différente de la réponse.


=== Utilisation couplé à un scénario avec passage de tags

Comme vu précédemment, on peut coupler l'interaction à un scénario, dans lequel on va pouvoir faire des actions plus ou moins complexe et retourner une valeur.
Ici on va voir que l'on peut aller encore un peu plus loin en utilisant les tags pour passer des informations au scénario.
Lors de l'utilisation de tags dans la demande ceux-ci sont automatiquement passé aux scénarios.

[IMPORTANT]
Il faut absolument que le scénario soit en #*"Exécuter en avant plan"*#. 

Voilà un exemple : 

image::../images/interact031.png[]

Interaction à nouveau relativement simple, dans la demande on créé le tag *\#nom#*, puis dans la réponse on fait une composition entre du texte fixe et la valeur de retour du scénario qui viendra remplacer le tag *\#value#*. Puis enfin dans la partie action le lien avec le scénario à exécuter qui recevra le tag *\#nom#*

Pour le scénario :
 
image::../images/interact032.png[]

Comme on peut le voir il est relativement simple de reprendre un tag généré par une interaction dans le scénario, il suffit de l'écrire comme dans l'interaction.
Dans cet exemple, on teste le nom de la personne qui se trouve dans le tag *\#nom#* (ca aurais pu être trucmuch...).
Si on a une correspondance, contrairement à avant, cette fois ci j'utilise une variable pour stoker la réponse, puis en fin de scénario on fait un return de la variable qui est envoyé à l'interaction.

[NOTE]
Vous remarquerez que dans le test, les nom des personnes est entourer de *'* ou *"* c'est très important de le faire autour de tout texte à tester pour éviter une erreur, si vous trouvez dans les log une ligne avec :[xxxx-xx-xx xx:xx:xx][SCENARIO] Expression non valide xxxxxxxx, c'est qu'il y as surement un souci de côte [' ou "].

et la réponse avec le test de l'interaction

image::../images/interact030.png[]

=== Programmation d'une action avec les interactions

Les interactions permettent de faire beaucoup de chose. En particulier, vous pouvez programmer dynamiquement une action. Exemple : "Met le chauffage à 22 pour 14h50". Pour cela rien de plus simple, il suffit d'utiliser les tags \#time# (si on définit une heure précise) ou  \#duration# (pour dans X unité de temps, exemple dans 1 heure) : 

image::../images/interact23.JPG[]

[NOTE]
Vous remarquerez dans la réponse le tag \#value# celui-ci contient, dans le cas d'une interaction programmé, l'heure de programmation effective

Voilà le résultat : 

image::../images/interact24.JPG[]

== Tester une interaction

Le bouton tester (en haut a gauche) vous permet de saisir une phrase pour tester son bon fonctionnement et de l'exécuter : 

image::../images/interact11.JPG[]

En réponse, Jeedom vous retournera la réponse qui correspond à l'interaction (champ réponse) : 

image::../images/interact13.JPG[]


== Configuration

La configuration est accessible à partir du menu Configuration (en haut à droite) puis la partie "Configuration des interactions" :

image::../images/interact14.JPG[]

Vous avez ici 3 paramètres : 

* *Sensibilité* : il y a 4 niveau de correspondance 
** pour 1 mot : le niveau de correspondance pour les interactions à un seul mot
** 2 mots : le niveau de correspondance pour les interactions à deux mots
** 3 mots : le niveau de correspondance pour les interactions à trois mots
** + de 3 mots : le niveau de correspondance pour les interactions à plus de trois mots

La sensibilité va de 1 (correspond exactement) à 99 (je louche donc c'est ok pour moi), 

* *Ne pas répondre si l'interaction n'est pas comprise* : par défaut Jeedom répond "je n'ai pas compris" si l'interaction n'est pas comprise, il est possible de désactiver ce fonctionnement pour que Jeedom ne réponde rien, mettre le bouton à oui pour désactiver la réponse.
* *Regex général d'exclusion pour les interactions* : permet de définir une regexp qui si elle correspond à une interaction supprimera automatiquement cette phrase de la génération (réservé aux experts) pour plus d'info voir les explications dans le chapitre *"Regexp d'exclusion"*

Puis vous retrouvez la partie paramétrage des couleurs qui est décrite en détail dans le chapitre *"Piloter la couleur d’un bandeau de LED"*

[IMPORTANT]
Ne pas oublier de sauver en bas de page.

[TIP]
Si vous activez les logs au niveau debug, vous avez un log interact qui vous donne la niveau de sensibilité pour chaque comparaison de phrase, cela peut permettre de régler celui-ci plus facilement.

== Résumé

Demande::
Vous pouvez utiliser "\#commande#" et "\#objet#" (les 2 doivent absolument être utilisé ensemble) pour générer une liste de commandes (il est possible de filtrer la génération pour réduire la liste). Il est aussi possible d'utiliser "\#equipement#" (utile si plusieurs commandes appartenant au même objet ont le même nom)
Exemple : Quelle est la "\#commande# [du |de la |de l']\#objet#"
Lors de la génération des commandes vous pouvez utiliser le champ synonyme (syn1=syn2,syn3|syn4=syn5) pour remplacer le nom des objets, des équipements et/ou des commandes

Réponse:
Vous pouvez utiliser "\#valeur#" et "\#unite#" dans le retour (ils seront remplacés par la valeur et l'unité de la commande). Vous avez aussi accès à tous les tag des scénario et à : 
"\#profile#" => Nom de la personne ayant lancé l'exécution (peut ne pas être disponible)
Exemple : "\#valeur# \#unite#"
Vous pouvez utiliser le champ conversion binaire pour convertir les valeurs binaires (0 et 1) : 
Exemple : non|oui

Personne::
Le champ personne permet de n'autoriser que certaines personnes à exécuter la commande, vous pouvez mettre plusieurs profils en les séparant par |.
Exemple : personne1|personne2
