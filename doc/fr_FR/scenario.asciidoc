==== Description
Voici pour moi la partie la plus importante dans la domotique : les scénarios. Véritable cerveau de la domotique 
c’est ce qui permet d’interagir avec le monde réel de manière “intelligente”. 
J’ai donc essayé de les rendre les plus flexibles possible en essayant de ne jamais brider 
l’utilisateur tout en essayant qu’ils soient facilement configurable :

image::../images/scenario.JPG[]

Comme pour la vue on retrouve sur la partie droite la liste des scénarios (filtrable par groupe) 
et sur la gauche le scénario lui même, ici plusieurs parties :

- En haut la partie générale où on retrouve :
- Le nom
- Le groupe
- Si le scenario est actif ou non
- Si le scenario est visible ou non
- Le choix d'affecter à un parent ou pas
- La durée d’exécution maximum autorisée
- Ensuite vient la partie des déclencheurs qui peuvent soit être un ou plusieurs événements 
et/ou une programmation (une heure donnée, une fréquence… 
cette partie s’écrit à l’aide d’une syntaxe type crontab accessible via la touche ?)
- Enfin il y a la partie information qui indique la dernière fois que le scenario a été exécuté 
(scénario actif), la dernière fois qu’il a été vérifié ainsi que sont statut actuel
- En haut à droite on retrouve quelques actions utiles : 
duplication, l’arrêt forcé d’un scénario,le choix d'excuter le plus rapidement possible le scénario, 
log de la dernière exécution (très pratique pour vérifier le déroulement exact du scénario). 
- Sur la partie basse on retrouve le scénario en lui même 
celui-ci est composé d’un nombre illimité de bloc qui peuvent être imbriqués les un dans les autres :
* Si/Alors/Sinon : bloc de base permettant de réaliser des conditions
* Boucle : permet de réaliser des boucles de 1 jusqu’à un nombre défini (ou même une valeur d’un capteur, ou nombre aléatoire)
* Dans : permet de lancer une action dans X minute(s) (0 est une valeur possible). 
La particularité c'est que les actions sont lancé en arriere plan, elle ne bloque donc pas la suite du scénario. 
C'est donc un bloc non bloquant
* Code : permet d’écrire directement en code PHP 
(demande certaines connaissances et peut être risqué mais permet de n’avoir plus aucune contrainte)

Pour les conditions j’ai essayé de faire en sorte qu’on puisse les écrire le plus possible en langage naturel 
tout en restant souple. On a donc un bouton permettant de sélectionner un équipement puis on écrit la condition. 
Il existe une liste de tag permettant d’avoir accès à des variables issues du scénario ou d’un autre, 
à l’heure, à la date, à un nombre aléatoire….


Pour les actions on peut exécuter soit une action d’une commande 
(les options de celle-ci apparaitront sur sa droite, comme dans la capture tout en haut pour l’envoi de mail), 
soit une commande d’affectation de variable ou de pause
(très pratique pour simuler la présence surtout couplé à la génération d’une durée aléatoire) 
ou même d’action sur un autre scénario (start, stop, activer, désactiver)


==== Déclencheur
Il existe des déclencheur spécifique (autre que ceux fournis par les commandes) :

- \#start#  : déclenché au (re)démarrage de Jeedom
- \#user_connect#  : déclenché lors de la connexion d'un utilisateur

==== Condition ou valeur d'une commande d'action
Attention à bien mettre des ' ou " (quote ou double quote) lors de l'utilisation de chaîne de caractère. 
Ex : "#[Object][Equipement][Info]#" = "oui"
Vous pouvez utiliser n'importe lequel des symboles suivant pour les opérateurs : 

- == : égal
- > : supérieur
- >= : supérieur ou égal
- < : inférieur
- <= : inférieur ou égal
- != : différent
- ~ : contient
- !~ : ne contient pas

Vous pouvez combiner n'importe quelle opération avec les opérateurs suivants :

- && / ET / et / AND / and : et
- || / OU / ou / OR / or : ou
- |^ / XOR / xor : ou

Vous pouvez aussi utiliser les tags suivants :

- \#seconde# : seconde courante
- \#heure# : heure courante (ex : 17 pour 17h15)
- \#minute# : minute courante (ex : 15 pour 17h15)
- \#jour# : jour courant
- \#mois# : mois courant
- \#annee# : année courante
- \#time# : heure et minute courante (ex : 1715 pour 17h15)
- \#timestamp# : retourne le nombre de secondes depuis le 1er janvier 1970
- \#date# : jour et mois courant (ex : 1215 pour le 15 décembre)
- \#semaine# : numéro de la semaine (ex : 51)
- \#sjour# : pour le nom du jour de la semaine (ex : Samedi)
- \#njour# : numéro du jour de 0 (dimanche) à 6 (samedi)
- \#smois# : pour le nom du mois (ex : Janvier)
- \#IP# : IP interne de jeedom
- \#hostname# : nom de la machine Jeedom
    
Plusieurs fonctions sont disponibles pour les équipements :

- **average**(commande,période) et **averageBetween**(commande,start,end) : donnent la moyenne de la commande sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : average(\#[Salle de bain][Hydrometrie][Humidité]#,1 hour) : Renvoie la moyenne de la commande sur la dernière heure
    * Ex : averageBetween(\#[Salle de bain][Hydrometrie][Humidité]#,2015-01-01 00:00:00,2015-01-15 00:00:00) : Renvoie la moyenne de la commande entre le 1 janvier 2015 et le 15 janvier 2015
- **min**(commande,période) et **minBetween**(commande,start,end) : donnent le minimum de la commande sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : min(\#[Salle de bain][Hydrometrie][Humidité]#,15 min) : Renvoie le minimum de la commande sur les 15 dernières minutes
    * Ex : minBetween(\#[Salle de bain][Hydrometrie][Humidité]#,2015-01-01 00:00:00,2015-01-15 00:00:00) : Renvoie le minimum de la commande entre le 1 janvier 2015 et le 15 janvier 2015
- **max**(commande,période) et **maxBetween**(commande,start,end) : donnent le maximum de la commande sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : max(\#[Salle de bain][Hydrometrie][Humidité]#,7 day) : Renvoie le maximum de la commande sur les 7 derniers jours
    * Ex : maxBetween(\#[Salle de bain][Hydrometrie][Humidité]#,2015-01-01 00:00:00,2015-01-15 00:00:00) : Renvoie le maximum de la commande entre le 1 janvier 2015 et le 15 janvier 2015
- **duration**(commande, valeur, période) et **durationbetween**(commande,valeur,start,end) : donnent la durée en minutes pendant laquelle l'équipement avait la valeur choisie sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : duration(#[Salon][Prise][Etat]#,1,Today) : Renvoie la durée en minutes pendant laquelle la prise était allumée depuis le début de la journée.
    * Ex : durationBetween(#[Salon][Prise][Etat]#,0,Last Monday,Now) : Renvoie la durée en minutes pendant laquelle la prise était éteinte depuis lundi dernier.
- **statistics**(commande,calcul,période) et **statisticsBetween**(commande,calcul,start,end) : donnent le résultat de différents calculs statistique (sum, count, std, variance, avg, min, max) sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : statistics(\#[Salle de bain][Hydrometrie][Humidité]#,std,1 mois) : Renvoie link:/http://fr.wikipedia.org/wiki/%C3%89cart_type[l'écart-type] de température sur un mois.
- **tendance**(commande,période,seuil) : donne la tendance de la commande sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : tendance(\#[Salle de bain][Hydrometrie][Humidité]#,1 hour,0.1) : Renvoie 1 si en augmentation, 0 si constant et -1 si en diminution
           Le seuil permet de definir la sensibilitée, attention le calcul du seuil utilise la calcul de link:/http://fr.wikipedia.org/wiki/M%C3%A9thode_des_moindres_carr%C3%A9s[moindre carrés]
- **stateDuration**(commande,[valeur]) : donne la durée en seconde depuis le dernier changement de valeur
    * Ex : stateDuration(\#[Salle de bain][Hydrometrie][Humidité]#) : Renvoie 300 si cette valeur est la depuis 5min
- **lastChangeStateDuration**(commande,valeur) : donne la durée en secondes depuis le dernier changement d'état à la valeur passée en paramètre.
    * Ex : lastStateChange(\#[Salle de bain][Hydrometrie][Humidité]#,0) : Renvoie 300 si cette valeur est passée à 0 la dernière fois il y a 5 minutes (même si depuis sa valeur a changé).
- **lastStateDuration**(commande,valeur) : donne la durée en secondes pendant laquelle l'équipement a dernièrement eu la valeur choisie. Attention, la valeur de l'équipement doit être historisée.
    * Ex : lastStateDuration(\#[Salle de bain][Hydrometrie][Humidité]#,0) : Renvoie 300 si la valeur 0 est là depuis 5 minutes ou si elle a été là pendant 5 minutes précédemment.
- **stateChanges**(commande,[valeur], période) et **stateChangesBetween**(commande, [valeur], start, end) : donnent le nombre de changements d'état (vers une certaine valeur si indiquée, ou au total sinon) sur la période (period=[month,day,hour,min] ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : stateChanges(\#[Salon][Prise][Etat]#,1,Today) : Renvoie le nombre d'allumages (passage à 1) de la prise aujourd'hui
    * Ex : stateChangesBetween(\#[Salon][Prise][Etat]#,0,2015-01-01 00:00:00,2015-01-15 00:00:00) : Renvoie le nombre d'extinctions (passage à 0) de la prise entre le 1 janvier 2015 et le 15 janvier 2015
- **lastBetween**(commande,start,end) : donne la dernière valeur enregistrée pour l'équipement entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou link:/http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : lastBetween(\#[Salle de bain][Hydrometrie][Humidité]#,Yesterday,Today) : Renvoie la dernière température enregistrée hier.
- **variable**(mavariable,valeur par default) : récupération de la valeur d'une variable ou de la valeur souhaitée par défaut
    * Ex : variable(plop,10) renvoie la valeur de la variable plop ou 10 si elle est vide ou n'existe pas
- **scenario**(scenario) : donne le statut du scenario
    * Ex : scenario(\#[Salle de bain][Lumière][Auto]#) : Renvoi 1 en cours, 0 si arreté et -1 si desactivé, -2 si le scénario n'éxiste pas et -3 si l'état n'est pas cohérent
- **lastScenarioExecution**(scenario) : donne la durée en seconde depuis le dernier lancement du scénario
    * Ex : lastScenarioExecution(\#[Salle de bain][Lumière][Auto]#) : Renvoi 300 si le scénario c'est lancé pour la derniere fois il y a 5min
- **collectDate**(cmd,[format]) : renvoie la date de la derniere donnée pour la commande donnée en paramètre, le 2eme paramètre optionel permet de spécifier le format de retour (détails link:http://php.net/manual/fr/function.date.php[ici]). Un retour de -1 signifi que la commande est introuvable, et -2 que la commande n'est pas de type info
    * Ex : collectDate(\#[Salle de bain][Hydrometrie][Humidité]#) : renverra 2015-01-01 17:45:12

Les périodes et intervalles de ces fonctions peuvent également s'utiliser avec link:/http://php.net/manual/fr/datetime.formats.relative.php[des expressions PHP] comme par exemple :

- 'Now' : maintenant
- 'Today' : 00:00 aujourd'hui (permet par exemple d'obtenir des résultats de la journée si entre 'Today' et 'Now')
- 'Last Monday' : lundi dernier à 00:00
- '5 days ago' : il y a 5 jours
- 'Yesterday noon' : hier midi
- Etc ...

Voici un exemple pratique pour comprendre les valeurs retournées par ces différentes fonctions :

[options="header",width="50%"]
|======================
| Prise ayant pour valeurs :        | 000 (pendant 10 minutes) 11 (pendant 1 heure) 000 (pendant 10 minutes)
| average(prise,période)            | Renvoie la moyenne des 0 et 1 (peut être influencée par le polling)
| min(prise,période)                | Renvoie 0 : la prise a bien été éteinte dans la période
| max(prise,période)                | Renvoie 1 : la prise a bien été allumée dans la période
| duration(prise,1,période)         | Renvoie 60 : la prise était allumée (à 1) pendant 60 minutes dans la période
| duration(prise,0,période)         | Renvoie 20 : la prise était éteinte (à 0) pendant 20 minutes dans la période
| statistics(prise,count,période)   | Renvoie 8 : il y a eu 8 remontées d'état dans la période
| tendance(prise,période,0.1)       | Renvoie -1 : tendance à la baisse
| stateDuration(prise)              | Renvoie 600 : la prise est dans son état actuel depuis 600 secondes (10 minutes)
| stateDuration(prise,0)            | Renvoie 600 : la prise est éteinte (à 0) depuis 600 secondes (10 minutes)
| stateDuration(prise,1)            | Renvoie une valeur comprise entre 0 et stateDuration(prise) (selon votre polling) : la prise n'est pas dans cet état
| lastChangeStateDuration(prise,0)  | Renvoie 600 : la prise s'est éteinte (passage à 0) pour la dernière fois il y a 600 secondes (10 minutes)
| lastChangeStateDuration(prise,1)  | Renvoie 4200 : la prise s'est allumée (passage à 1) pour la dernière fois il y a 4200 secondes (1h10)
| lastStateDuration(prise,0)        | Renvoie 600 : la prise est éteinte depuis 600 secondes (10 minutes)
| lastStateDuration(prise,1)        | Renvoie 3600 : la prise a été allumée pour la dernière fois pendant 3600 secondes (1h)
| stateChanges(prise,période)       | Renvoie 3 : la prise a changé 3 fois d'état pendant la période
| stateChanges(prise,0,période)     | Renvoie 2 : la prise s'est éteinte (passage à 0) deux fois pendant la période
| stateChanges(prise,1,période)     | Renvoie 1 : la prise s'est allumée (passage à 1) une fois pendant la période
|======================
Une boîte à outils de fonctions génériques peut également servir à effectuer des conversions ou calculs :

- **rand**(1,10) : pour un nombre aléatoire de 1 à 10
- **randomColor**(min,max) : donne une couleur aléatoire compris entre 2 bornes ( 0 => rouge, 50 => vert, 100 => bleu)
    * Ex : randomColor(40,60) : Pour avoir une couleur aléatoire proche du vert
- **trigger**(commande) : permet de connaitre le declencheur du scénario ou de savoir si c'est bien la commande passé en parametre qui a declenchée le scénario
    * Ex : trigger(\#[Salle de bain][Hydrometrie][Humidité]#) : 1 si c'est bien #[Salle de bain][Hydrometrie][Humidité]# qui a declenché le scénario sinon 0
- **round**(valeur,[decimal]) :permet un arrondit au dessus, [decimal] nombre de decimal après la virgule
    * Ex : round(\#[Salle de bain][Hydrometrie][Humidité]# / 10) : renverra 9 si le pourcentage d'humidité et 85
- **odd**(valeur) : permet de savoir si un nombre est impaire ou non. Renvoi 1 si impaire 0 sinon
    * Ex : odd(1) :  renverra 1
- **median**(commande1,commande2....commandeN) : renvoit la médiane de valeur
    * Ex : median(15,25,20) :  renverra 20
- **time**(value) : permet d'addition #time# avec une durée
    * Ex : time(\#time\# + 30) : s'il est 16h50 renverra : 1650 + 30 = 1720
- **formatTime**(time) : permet de formater le retour d'une chaine #time#
    * Ex : formatTime(1650) : renverra 16h50
- **floor**(time/60) : permet de convertir des secondes en minutes, ou des minutes en heures (floor(time/3600) pour des secondes en heures)
    * Ex : floor(130/60) : renverra 2 (minutes si 130s, ou heures si 130m)
            
==== Action
En plus des commandes domotiques vous avez accès aux fonctions suivantes : 

- sleep : pause de x seconde(s)
- wait : attend jusqu'a ce que la condition soit valide (maximum 2h)                         
- variable : création/modification d'une ou de la valeur d'une variable
- scenario : permet le controle des scénarios
- stop : arrête le scénario
- icon : permet de changer l'icone de représentation du scenario
- say : permet de faire dire un texte à jeedom (ne marche que si un onglet jeedom est ouvert dans le navigateur)
- return : retourne un message à la fin du scénario, ne sert que pour retourner un message spécifique suite a une intération. Attention à bien cocher la case "Exécuter le plus rapidement possible" pour que ca marche
- gotodesign : change le design afficher sur tous les navigateurs qui affichage un design par le design demandé
- log : permet de rajouter un message dans les logs
- message : permet d'ajouter une message dans le centre de message
               
Vous pouvez aussi utiliser les tags suivants dans les options : 

- \#seconde# : seconde courante
- \#heure#  : heure courante (ex : 17 pour 17h15)
- \#minute# : minute courante (ex : 15 pour 17h15)
- \#jour# : jour courant
- \#mois# : mois courant
- \#annee# : année courante
- \#time# : heure et minute courante (ex : 1715 pour 17h15)
- \#timestamp# : retourne le nombre de secondes depuis le 1er janvier 1970
- \#date# : jour et mois courant (ex : 1215 pour le 15 decembre)
- \#semaine# : numéro de la semaine (ex : 51)
- \#sjour# : pour le nom du jour de la semaine en anglais (ex : sunday)
- \#njour# : numéro du jour de 0 (dimanche) à 6 (samedi)
- \#smois# : pour le nom du mois (ex : Janvier)
- \#IP# : IP interne de jeedom
- \#hostname# : nom de la machine Jeedom
- rand[1-10] : pour un nombre aléatoire de 1 à 10
- variable (mavariable,valeur par default) : récupération de la valeur d'une variable ou de la valeur souhaitée par défaut
    * Ex : variable(plop,10) renvoie la valeur de la variable plop ou 10 si elle est vide ou n'existe pas
- formatTime(time) : permet de formater le retour d'une chaine #time#
    * Ex : formatTime(1650) : renverra 16h50
             
==== Code
Attention les tags ne sont pas disponible dans un bloc de type code

Commandes (capteurs et actionneurs)::

- cmd::byString($string);
    * Retourne l'objet commande correspondant
    * $string => lien vers la commande voulue : #[objet][equipement][commande]# (ex :  #[Appartement][Alarme][Actif]#)
- cmd::byId($id);
    * Retourne l'objet commande correspondant
    * $id => Id de la commande voulue (voir Général => Affichage)
- $cmd->execCmd($options = null, $cache = 1);
    * Exécute la commande et retourne le résultat
    * $options => Options pour l'exécution de la commande (peut être spécifique au plugin), option de base : 
          ** Sous-type de la commande : message => $option = array('title' => 'titre du message , 'message' => 'Mon message');
                                     color => $option = array('color' => 'couleur en hexadécimal');
                                     value => $option = array('color' => 'valeur voulue');
                                     slider => $option = array('slider' => 'valeur voulue de 0 à 100');
    * $cache  => 0 = ignorer le cache , 1 = mode normal, 2 = cache utilisé même si expiré (puis marqué à recollecter)

Log::

- log::add('filename','level','message');
    * filename => nom du fichier de log
    * level => [debug],[info],[error],[event]
    * message => message à écrire dans les logs
                           
Scénario::

- $scenario->getName();
    * Retourne le nom du scénario courant
                              
- $scenario->getGroup();
    * Retourne le groupe du scénario
                           
- $scenario->getIsActive();
    * Retourne l'état du scénario
                              
- $scenario->setIsActive($active);
    * Permet d'activer ou non le scénario
    * $active => 1 actif , 0 non actif
                              
- $scenario->setOnGoing($onGoing);
    * Permet de dire si le scénario est en cours ou non
    * $onGoing => 1 en cours , 0 arrêté
                               
- $scenario->save();
    * Sauvegarde les modifications
                             
- $scenario->setData($key, $value);
    * Sauvegarde une donnée
    * $key => clef de la valeur (int ou string)
    * $value => valeur à stocker (int, string, array ou object)
                               
- $scenario->getData($key);
    * Récupère une donnée
    * $key => clef de la valeur (int ou string)
                             
- $scenario->removeData($key);
    * Supprime une donnée
