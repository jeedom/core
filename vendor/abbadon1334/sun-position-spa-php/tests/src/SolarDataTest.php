<?php

namespace SolarData;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2017-04-25 at 10:43:26.
 */
class SolarDataTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SolarData
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SolarData();
        $this->object->setDebug(true);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SolarData\SolarData::setObserverPosition
     *
     * @todo   Implement testSetObserverPosition().
     */
    public function testSetObserverPosition()
    {
        $this->object->setObserverPosition(31, -7, 400);
        $this->assertSame(
                [
            (float) 31,
            (float) -7,
            (float) 400,
                ], [
            $this->object->getObserver()->ObserverPosition->latitude,
            $this->object->getObserver()->ObserverPosition->longitude,
            $this->object->getObserver()->ObserverPosition->altitude,
        ]);
    }

    /**
     * @covers SolarData\SolarData::setObserverDate
     *
     * @todo   Implement testSetObserverDate().
     */
    public function testSetObserverDate()
    {
        $this->object->setObserverDate(2000, 1, 1);
        $this->assertSame(
                [
            (float) 2000,
            (float) 1,
            (float) 1,
                ], [
            $this->object->getObserver()->ObserverTime->Year,
            $this->object->getObserver()->ObserverTime->Month,
            $this->object->getObserver()->ObserverTime->Day,
        ]);
    }

    /**
     * @covers SolarData\SolarData::setObserverTime
     *
     * @todo   Implement testSetObserverTime().
     */
    public function testSetObserverTime()
    {
        $this->object->setObserverTime(12, 0);
        $this->assertSame(
                [
            (float) 12,
            (float) 0,
            (float) 0,
                ], [
            $this->object->getObserver()->ObserverTime->Hour,
            $this->object->getObserver()->ObserverTime->Minute,
            $this->object->getObserver()->ObserverTime->Second,
        ]);
    }

    public function dataProviderTableA4_julianDay()
    {
        return [
            [2000, 1, 1, 12, 0, 2451545.0],
            [1999, 1, 1, 0, 0, 2451179.5],
            [1987, 1, 27, 0, 0, 2446822.5],
            [1987, 6, 19, 12, 0, 2446966.0],
            [1988, 1, 27, 0, 0, 2447187.5],
            [1988, 6, 19, 12, 0, 2447332.0],
            [1900, 1, 1, 0, 0, 2415020.5],
            [1600, 1, 1, 0, 0, 2305447.5],
            [1600, 12, 31, 0, 0, 2305812.5],
            [837, 4, 10, 7, 12, 2026871.8],
            [-123, 12, 31, 0, 0, 1676496.5],
            [-122, 1, 1, 0, 0, 1676497.5],
            [-1000, 7, 12, 12, 0, 1356001.0],
            [-1000, 2, 29, 0, 0, 1355866.5],
            [-1001, 8, 17, 21, 36, 1355671.4],
            [-4712, 1, 1, 12, 0, 0.0],
        ];
    }

    /**
     * @dataProvider dataProviderTableA4_julianDay
     */
    public function testGetJulianDay($year, $month, $day, $hour, $minute, $result)
    {
        $this->object->setObserverDate($year, $month, $day);
        $this->object->setObserverTime($hour, $minute);
        $this->object->calculate();

        $this->assertEquals($result, $this->object->getObserver()->ObserverTime->JulianDay, '', 1 / 1e6);
    }

    private function prepareTestCase()
    {
        $this->object->setObserverPosition(39.742476, -105.1786, 1830.14);

        $this->object->setObserverDate(2003, 10, 17);

        $this->object->setObserverTime(12, 30, 30);
        $this->object->setDeltaTime(67.0);
        $this->object->setObserverTimezone(-7.0);

        $this->object->setObserverAtmosphericPressure(820);
        $this->object->setObserverAtmosphericTemperature(11.0);

        $this->object->calculate();

        return $this->object->SunPosition;
    }

    public function testA5_Example_Test_JD()
    {
        $this->prepareTestCase();
        $this->assertEquals(2452930.312847, $this->object->SunPosition->JD, '', 1 / 1e6);
    }

    public function testA5_Example_Test_ArrayL()
    {
        $this->prepareTestCase();
        $this->assertEquals([
            172067561.526586,
            628332010650.051147,
            61368.682493,
            -26.902819,
            -121.279536,
            -0.999999,
        ], $this->object->SunPosition->TEST_UNIT_L, '', 1 / 1e6);
    }

    public function testA5_Example_Test_L()
    {
        $this->prepareTestCase();
        $this->assertEquals(24.0182616917, $this->object->SunPosition->L°, '', 1 / 1e10);
    }

    public function testA5_Example_Test_ArrayB()
    {
        $this->prepareTestCase();
        $this->assertEquals([
            -176.502688,
            3.067582,
        ], $this->object->SunPosition->TEST_UNIT_B, '', 1 / 1e6);
    }

    public function testA5_Example_Test_B()
    {
        $this->prepareTestCase();
        $this->assertEquals(-0.0001011219, $this->object->SunPosition->B°, '', 1 / 1e10);
    }

    public function testA5_Example_Test_R()
    {
        $this->prepareTestCase();
        $this->assertEquals(0.9965422974, $this->object->SunPosition->R, '', 1 / 1e10);
    }

    public function testA5_Example_Test_ArrayR()
    {
        $this->prepareTestCase();
        $this->assertEquals([
            99653849.037796,
            100378.567146,
            -1140.953507,
            -141.115419,
            1.232361,
        ], $this->object->SunPosition->TEST_UNIT_R, '', 1 / 1e6);
    }

    public function dataProviderSunPositionVars()
    {
        return [
            ['ObsPressure', 820, 1 / 1e0],
            ['ObsTemperature', 11, 1 / 1e0],
            ['Θ°', 204.0182616917, 1 / 1e10],
            ['β°',  0.0001011219, 1 / 1e10],
            ['Δψ°', -0.00399840, 1 / 1e8],
            ['Δε°',  0.00166657, 1 / 1e8],
            ['ε°', 23.440465, 1 / 1e6],
            ['e°', 39.888377, 1 / 1e6],
            ['e0°', 39.872045, 1 / 1e6],
            ['Δe°',  0.016332, 1 / 1e6],
            ['λ°', 204.0085519281, 1 / 1e10],
            ['α°', 202.2274078, 1 / 1e7],
            ['Δα°', -0.0003685, 1 / 1e7],
            ['α´°', 202.2270392, 1 / 1e6],
            ['ξ°',  0.0024512534, 1 / 1e8],
            ['δ°', -9.31434, 1 / 1e5],
            ['H°', 11.1059, 1 / 1e4],
            ['H´°', 11.10629, 1 / 1e4],
            ['δ´°', -9.316179, 1 / 1e6],
            ['ν°', 318.5119098411, 1 / 1e10],
            ['ν0°', 318.515578272, 1 / 1e9],
            ['Z°', 50.11162, 1 / 1e5],
            ['Φ°', 194.34024, 1 / 1e5],
        ];
    }

    /**
     * @dataProvider dataProviderSunPositionVars
     */
    public function testSunPositionVars($varName, $exceptedResult, $precision)
    {
        $this->prepareTestCase();
        $this->assertEquals($exceptedResult, $this->object->SunPosition->$varName, '', $precision);
    }

    public function testEquationOfTime()
    {
        $this->prepareTestCase();
        $this->assertEquals(14.641503, $this->object->getEquationOfTime(), '', 1 / 1e4);
    }

    public function testSunMeanLongitude()
    {
        $this->prepareTestCase();
        $this->assertEquals(
            205.8971722516, $this->object->SunPosition->getSunMeanLongitude(), '', 1 / 1e10
        );
    }

    public function testSurfaceIncidenceAngle()
    {
        $this->prepareTestCase();
        $this->assertEquals(
            25.18700, $this->object->getSurfaceIncidenceAngle(30, -10), '', 1 / 1e5
        );
    }

    /*
    public function dataProviderSUN_rise_transit_set() {

        $sun_data = [];

        for($a=0;$a<600;$a++) {

            $randomDate = rand(-81101347200,64060588800);

            $Date = new \DateTime();
            $Date->setTimestamp($randomDate);

            $sun_info = date_sun_info($randomDate,31.7667, 35.2333);

            $tmp 	= [] ;
            $tmp[] 	= $randomDate;
            $tmp[] 	= [
            'sunrise' 	=> $sun_info['sunrise'],
            'transit' 	=> $sun_info['transit'],
            'sunset' 	=> $sun_info['sunset']
            ];

            $sun_data[] = $tmp;
        }

        return $sun_data;
    }
    */

    /*
     * @dataProvider dataProviderSUN_rise_transit_set
     */
    /*
    public function testDataTestSunInfoPHP($datatime,$sundata) {

        $Date = new \DateTime();
        $Date->setTimestamp($datatime);

        $this->object->setObserverPosition(31.7667, 35.2333,0);

        $this->object->setObserverDate($Date->format('Y'), $Date->format('m'), $Date->format('d'));

        $this->object->setObserverTime(12, 30,30);

        $this->object->calculate();
        $this->object->calculateSunRiseTransitSet();

        $Date->setTime(0,0,0);
        $HourZeroDate = $Date->getTimestamp();

        $sunrise = date("H:i", $sundata['sunrise']);
        $transit = date("H:i", $sundata['transit']);
        $sunset  = date("H:i", $sundata['sunset']);

        $SPA_HM_sunrise = $this->getTestHMfromHMS($this->object->SunPosition->_DayFracToTime($this->object->SunPosition->DayFractionSunrise));
        $SPA_HM_transit = $this->getTestHMfromHMS($this->object->SunPosition->_DayFracToTime($this->object->SunPosition->DayFractionTransit));
        $SPA_HM_sunset = $this->getTestHMfromHMS($this->object->SunPosition->_DayFracToTime($this->object->SunPosition->DayFractionSunset));

        $ZTSunrise_check = $this->object->SunPosition->_DayFracToHours($this->object->SunPosition->DayFractionSunrise) * 60 * 60;
        $ZTTransit_check = $this->object->SunPosition->_DayFracToHours($this->object->SunPosition->DayFractionTransit) * 60 * 60;
        $ZTSunset_check = $this->object->SunPosition->_DayFracToHours($this->object->SunPosition->DayFractionSunset) * 60 * 60;

        $ZTSunrise = ($sundata['sunrise'] - $HourZeroDate);
        $ZTTransit = ($sundata['transit'] - $HourZeroDate);
        $ZTSunset  = ($sundata['sunset'] - $HourZeroDate);

        $this->assertEquals([
                abs($ZTSunrise - $ZTSunrise_check),
                abs($ZTTransit - $ZTTransit_check),
                abs($ZTSunset - $ZTSunset_check),
            ],[
                0,
                0,
                0
            ]
            ,' For date : ' . $Date->format('Y-m-d') . PHP_EOL
                . date("H:i", $ZTSunrise) . ' is out of tollerance error respect ' . date("H:i", $ZTSunrise_check) . PHP_EOL
                . date("H:i", $ZTTransit) . ' is out of tollerance error respect ' . date("H:i", $ZTTransit_check) . PHP_EOL
                . date("H:i", $ZTSunset) . ' is out of tollerance error respect ' . date("H:i", $ZTSunset_check) . PHP_EOL
            ,

            12 * 60);
    }

    private function getTestHMfromHMS($timeHMS) {
        $chunk = explode(':',$timeHMS);
        return $chunk[0].":".$chunk[1];
    }
    */
    //getSunRiseTransitSet
}
