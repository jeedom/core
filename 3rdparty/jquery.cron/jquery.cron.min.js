(function(e) {
  var n = {
    initial: "* * * * *",
    minuteOpts: {
      minWidth: 100,
      itemWidth: 30,
      columns: 4,
      rows: undefined,
      title: "Minutes après l'heure"
    },
    timeHourOpts: {
      minWidth: 100,
      itemWidth: 20,
      columns: 2,
      rows: undefined,
      title: "Heure: heure"
    },
    domOpts: {
      minWidth: 100,
      itemWidth: 30,
      columns: undefined,
      rows: 10,
      title: "Jour du mois"
    },
    monthOpts: {
      minWidth: 100,
      itemWidth: 100,
      columns: 2,
      rows: undefined,
      title: undefined
    },
    dowOpts: {
      minWidth: 100,
      itemWidth: undefined,
      columns: undefined,
      rows: undefined,
      title: undefined
    },
    timeMinuteOpts: {
      minWidth: 100,
      itemWidth: 20,
      columns: 4,
      rows: undefined,
      title: "Temps: minute"
    },
    effectOpts: {
      openSpeed: 400,
      closeSpeed: 400,
      openEffect: "slide",
      closeEffect: "slide",
      hideOnMouseOut: true
    },
    url_set: undefined,
    customValues: undefined,
    onChange: undefined,
    useGentleSelect: false
  };
  var y = "";
  for (var u = 0; u < 60; u++) {
    var t = (u < 10) ? "0" : "";
    y += "<option value='" + u + "'>" + t + u + "</option>\n"
  }
  var d = "";
  for (var u = 0; u < 24; u++) {
    var t = (u < 10) ? "0" : "";
    d += "<option value='" + u + "'>" + t + u + "</option>\n"
  }
  var v = "";
  for (var u = 1; u < 32; u++) {
    v += "<option value='" + u + "'>" + u + "</option>\n"
  }
  var h = "";
  var l = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Aout", "Septembre", "Octobre", "Novembre", "Décembre"];
  for (var u = 0; u < l.length; u++) {
    h += "<option value='" + (u + 1) + "'>" + l[u] + "</option>\n"
  }
  var s = "";
  var g = ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"];
  for (var u = 0; u < g.length; u++) {
    s += "<option value='" + u + "'>" + g[u] + "</option>\n"
  }
  var r = "";
  var b = {"minute" : "Minute","hour" : "Heure","day" :"Jour","week" : "Semaine","month" : "Mois","year" : "Année"};
  for(var u in b){
    r += "<option value='" + u + "'>" + b[u] + "</option>\n"
  }
  var p = {
    minute: [],
    hour: ["mins"],
    day: ["time"],
    week: ["dow", "time"],
    month: ["dom", "time"],
    year: ["dom", "month", "time"]
  };
  var w = {
    minute: /^(\*\s){4}\*$/,
    hour: /^\d{1,2}\s(\*\s){3}\*$/,
    day: /^(\d{1,2}\s){2}(\*\s){2}\*$/,
    week: /^(\d{1,2}\s){2}(\*\s){2}\d{1,2}$/,
    month: /^(\d{1,2}\s){3}\*\s\*$/,
    year: /^(\d{1,2}\s){4}\*$/
  };
  
  function a(i) {
    if (typeof i == "undefined") {
      return false
    } else {
      return true
    }
  }
  
  function q(i) {
    return (!a(i) || typeof i == "object")
  }
  
  function z(A, j) {
    if (a(j.customValues)) {
      for (key in j.customValues) {
        if (A == j.customValues[key]) {
          return key
        }
      }
    }
    var E = /^((\d{1,2}|\*)\s){4}(\d{1,2}|\*)$/;
    if (typeof A != "string" || !E.test(A)) {
      e.error("cron: invalid initial value");
      return undefined
    }
    var C = A.split(" ");
    var D = [0, 0, 1, 1, 0];
    var G = [59, 23, 31, 12, 6];
    for (var B = 0; B < C.length; B++) {
      if (C[B] == "*") {
        continue
      }
      var F = parseInt(C[B]);
      if (a(F) && F <= G[B] && F >= D[B]) {
        continue
      }
      e.error("cron: invalid value found (col " + (B + 1) + ") in " + o.initial);
      return undefined
    }
    for (var H in w) {
      if (w[H].test(A)) {
        return H
      }
    }
    e.error("cron: valid but unsupported cron format. sorry.");
    return undefined
  }
  
  function f(j, i) {
    if (!a(z(i.initial, i))) {
      return true
    }
    if (!q(i.customValues)) {
      return true
    }
    if (a(i.customValues)) {
      for (key in i.customValues) {
        if (w.hasOwnProperty(key)) {
          e.error("cron: reserved keyword '" + key + "' should not be used as customValues key.");
          return true
        }
      }
    }
    return false
  }
  
  function k(B) {
    var i = B.data("block");
    var j = hour = day = month = dow = "*";
    var A = i.period.find("select").val();
    switch (A) {
      case "minute":
      break;
      case "hour":
      j = i.mins.find("select").val();
      break;
      case "day":
      j = i.time.find("select.cron-time-min").val();
      hour = i.time.find("select.cron-time-hour").val();
      break;
      case "week":
      j = i.time.find("select.cron-time-min").val();
      hour = i.time.find("select.cron-time-hour").val();
      dow = i.dow.find("select").val();
      break;
      case "month":
      j = i.time.find("select.cron-time-min").val();
      hour = i.time.find("select.cron-time-hour").val();
      day = i.dom.find("select").val();
      break;
      case "year":
      j = i.time.find("select.cron-time-min").val();
      hour = i.time.find("select.cron-time-hour").val();
      day = i.dom.find("select").val();
      month = i.month.find("select").val();
      break;
      default:
      return A
    }
    return [j, hour, day, month, dow].join(" ")
  }
  var x = {
    init: function(i) {
      var G = i ? i : {};
      var B = e.extend([], n, G);
      var j = e.extend({}, n.effectOpts, G.effectOpts);
      e.extend(B, {
        minuteOpts: e.extend({}, n.minuteOpts, j, G.minuteOpts),
        domOpts: e.extend({}, n.domOpts, j, G.domOpts),
        monthOpts: e.extend({}, n.monthOpts, j, G.monthOpts),
        dowOpts: e.extend({}, n.dowOpts, j, G.dowOpts),
        timeHourOpts: e.extend({}, n.timeHourOpts, j, G.timeHourOpts),
        timeMinuteOpts: e.extend({}, n.timeMinuteOpts, j, G.timeMinuteOpts)
      });
      if (f(this, B)) {
        return this
      }
      var C = [],
      A = "",
      D = B.customValues;
      if (a(D)) {
        for (var F in D) {
          A += "<option value='" + D[F] + "'>" + F + "</option>\n"
        }
      }
      C.period = e("<div class='form-group cron-period'><label class='col-xs-3 control-label'>Tous les</label><div class='col-xs-9'><select name='cron-period' class='form-control'>" + A + r + "</select></div></div>").appendTo(this).data("root", this);
      var E = C.period.find("select");
      E.bind("change.cron", m.periodChanged).data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(j)
      }
      C.dom = e("<div class='form-group cron-block cron-block-dom'><label class='col-xs-3 control-label'>Le</label><div class='col-xs-9'><select name='cron-dom' class='form-control'>" + v + "</select></div></div>").appendTo(this).data("root", this);
      E = C.dom.find("select").data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(B.domOpts)
      }
      C.month = e("<div class='form-group cron-block cron-block-month'><label class='col-xs-3 control-label'>De</label><div class='col-xs-9'><select name='cron-month' class='form-control'>" + h + "</select></div></div>").appendTo(this).data("root", this);
      E = C.month.find("select").data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(B.monthOpts)
      }
      C.mins = e("<div class='form-group cron-block cron-block-mins'><label class='col-xs-3 control-label'>A</label><div class='col-xs-6'><select name='cron-mins' class='form-control'>" + y + "</select></div><div class='col-xs-3'>minutes après l'heure</div></div>").appendTo(this).data("root", this);
      E = C.mins.find("select").data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(B.minuteOpts)
      }
      C.dow = e("<div class='form-group cron-block cron-block-dow'><label class='col-xs-3 control-label'>Le</label><div class='col-xs-9'><select name='cron-dow' class='form-control'>" + s + "</select></div></div>").appendTo(this).data("root", this);
      E = C.dow.find("select").data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(B.dowOpts)
      }
      C.time = e("<span class='cron-block cron-block-time'><div class='form-group'><label class='col-xs-3 control-label'>A</label><div class='col-xs-4'><select name='cron-time-hour' class='cron-time-hour form-control'>" + d + "</select></div><label class='col-xs-1 control-label'>:</label><div class='col-xs-4'><select name='cron-time-min' class='cron-time-min form-control'>" + y + "</select></div></div>").appendTo(this).data("root", this);
      E = C.time.find("select.cron-time-hour").data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(B.timeHourOpts)
      }
      E = C.time.find("select.cron-time-min").data("root", this);
      if (B.useGentleSelect) {
        E.gentleSelect(B.timeMinuteOpts)
      }
      C.controls = e("<span class='cron-controls'>&laquo; save <span class='cron-button cron-button-save'></span> </span>").appendTo(this).data("root", this).find("span.cron-button-save").bind("click.cron", m.saveClicked).data("root", this).end();
      this.find("select").bind("change.cron-callback", m.somethingChanged);
      this.data("options", B).data("block", C);
      this.data("current_value", B.initial);
      return x.value.call(this, B.initial)
    },
    value: function(C) {
      if (!C) {
        return k(this)
      }
      var A = this.data("options");
      var D = this.data("block");
      var F = A.useGentleSelect;
      var K = z(C, A);
      if (!a(K)) {
        return false
      }
      if (a(A.customValues) && A.customValues.hasOwnProperty(K)) {
        K = A.customValues[K]
      } else {
        var H = C.split(" ");
        var J = {
          mins: H[0],
          hour: H[1],
          dom: H[2],
          month: H[3],
          dow: H[4]
        };
        var G = p[K];
        for (var E = 0; E < G.length; E++) {
          var B = G[E];
          if (B == "time") {
            var I = D[B].find("select.cron-time-hour").val(J.hour);
            if (F) {
              I.gentleSelect("update")
            }
            I = D[B].find("select.cron-time-min").val(J.mins);
            if (F) {
              I.gentleSelect("update")
            }
          } else {
            var I = D[B].find("select").val(J[B]);
            if (F) {
              I.gentleSelect("update")
            }
          }
        }
      }
      var j = D.period.find("select").val(K);
      if (F) {
        j.gentleSelect("update")
      }
      j.trigger("change");
      return this
    }
  };
  var m = {
    periodChanged: function() {
      var A = e(this).data("root");
      var E = A.data("block"),
      C = A.data("options");
      var D = e(this).val();
      A.find(".cron-block").hide();
      if (p.hasOwnProperty(D)) {
        var j = p[e(this).val()];
        for (var B = 0; B < j.length; B++) {
          E[j[B]].show()
        }
      }
    },
    somethingChanged: function() {
      root = e(this).data("root");
      if (a(root.data("options").url_set)) {
        if (x.value.call(root) != root.data("current_value")) {
          root.addClass("cron-changed");
          root.data("block")["controls"].fadeIn()
        } else {
          root.removeClass("cron-changed");
          root.data("block")["controls"].fadeOut()
        }
      } else {
        root.data("block")["controls"].hide()
      }
      var i = root.data("options").onChange;
      if (a(i) && e.isFunction(i)) {
        i.call(root)
      }
    },
    saveClicked: function() {
      var j = e(this);
      var i = j.data("root");
      var A = x.value.call(i);
      if (j.hasClass("cron-loading")) {
        return
      }
      j.addClass("cron-loading");
      e.ajax({
        type: "POST",
        url: i.data("options").url_set,
        data: {
          cron: A
        },
        success: function() {
          i.data("current_value", A);
          j.removeClass("cron-loading");
          if (A == x.value.call(i)) {
            i.removeClass("cron-changed");
            i.data("block").controls.fadeOut()
          }
        },
        error: function() {
          alert("An error occured when submitting your request. Try again?");
          j.removeClass("cron-loading")
        }
      })
    }
  };
  e.fn.cron = function(i) {
    if (x[i]) {
      return x[i].apply(this, Array.prototype.slice.call(arguments, 1))
    } else {
      if (typeof i === "object" || !i) {
        return x.init.apply(this, arguments)
      } else {
        e.error("Method " + i + " does not exist on jQuery.cron")
      }
    }
  }
})(jQuery);
